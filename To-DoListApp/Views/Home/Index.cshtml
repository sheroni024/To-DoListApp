@{
    ViewData["Title"] = "ToDo List";
}

<div class="container py-4">
    <h2 class="mb-4 text-center">Dynamic To-Do List</h2>

    <div class="mb-3">
        <label for="emailInput" class="form-label">Recipient Email</label>
        <input type="email" id="emailInput" class="form-control" placeholder="example@gmail.com" />
    </div>

    <div class="d-flex gap-2 mb-3">
        <button id="addRowBtn" class="btn btn-success">+ Add Row</button>
        <button id="exportBtn" class="btn btn-primary">Export</button>
        <button id="sendBtn" class="btn btn-warning d-none">Send Mail</button>
    </div>

    <table id="todoTable" class="table table-bordered table-striped">
        <thead class="table-dark text-center">
            <tr>
                <th>Select</th>
                <th>ID</th>
                <th>Description</th>
                <th>Status</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</div>


@section Scripts {
    <script>
        const table = $('#todoTable tbody');
        const sendBtn = $('#sendBtn');

        function getNextId() {
            let maxId = 0;
            $('.idInput').each(function () {
                const id = parseInt($(this).val());
                if (!isNaN(id)) maxId = Math.max(maxId, id);
            });
            return maxId + 1;
        }

        $('#addRowBtn').click(() => {
            const nextId = getNextId();
            const row = $('<tr>');
            row.append(`<td><input type="checkbox" class="form-check-input selectRow" disabled></td>`);
            row.append(`<td><input type="text" class="form-control idInput" readonly value="${nextId}" /></td>`);
            row.append(`<td><input type="text" class="form-control descInput" /></td>`);
            row.append(`<td>
                <select class="form-select">
                    <option>Pending</option>
                    <option>Complete</option>
                    <option>InProgress</option>
                </select>
            </td>`);
            row.append(`<td><button type="button" class="btn btn-danger btn-sm deleteRowBtn">Delete</button></td>`);
            table.append(row);
        });

        table.on('input', '.descInput', checkRowFilled);
        table.on('change', '.selectRow', toggleSendBtn);
        table.on('change', 'select', checkRowFilled);

        // Delete row with confirmation
        table.on('click', '.deleteRowBtn', function () {
            if (confirm('Are you sure you want to delete this row?')) {
                $(this).closest('tr').remove();
                checkRowFilled();
            }
        });

        function checkRowFilled() {
            table.find('tr').each(function () {
                const row = $(this);
                const id = row.find('.idInput').val().trim();
                const desc = row.find('.descInput').val().trim();
                const checkbox = row.find('.selectRow');

                if (id && desc) {
                    checkbox.prop('disabled', false);
                } else {
                    checkbox.prop('disabled', true).prop('checked', false);
                }
            });

            toggleSendBtn();
        }

        function toggleSendBtn() {
            const anyChecked = table.find('.selectRow:checked').length > 0;
            sendBtn.toggleClass('d-none', !anyChecked);
        }

        $('#exportBtn').click(() => {
            const wb = XLSX.utils.book_new();
            const wsData = [
                ["To-Do List"],
                ["ID", "Description", "Status"]
            ];

            table.find('tr').each(function () {
                const desc = $(this).find('.descInput').val().trim();
                if (desc) {
                    const id = $(this).find('.idInput').val();
                    const status = $(this).find('select').val();
                    wsData.push([id, desc, status]);
                }
            });

            const ws = XLSX.utils.aoa_to_sheet(wsData);

            // Merge and format
            ws["!merges"] = [{ s: { r: 0, c: 0 }, e: { r: 0, c: 2 } }];
            ws["A1"].s = { font: { bold: true }, alignment: { horizontal: "center" } };
            ["A2", "B2", "C2"].forEach(cell => {
                if (ws[cell]) ws[cell].s = { font: { bold: true } };
            });

            XLSX.utils.book_append_sheet(wb, ws, "ToDoList");
            XLSX.writeFile(wb, "ToDoList.xlsx");
        });

        sendBtn.click(() => {
            const selected = [];
            table.find('tr').each(function () {
                const row = $(this);
                if (row.find('.selectRow').is(':checked')) {
                    selected.push({
                        id: row.find('.idInput').val(),
                        description: row.find('.descInput').val().trim(),
                        status: row.find('select').val()
                    });
                }
            });

            const email = $('#emailInput').val().trim();
            if (!email) {
                alert("Please enter an email address.");
                return;
            }

            if (selected.length === 0) {
                alert("Please select at least one row.");
                return;
            }

            $.ajax({
                url: '/Home/SendEmail',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    recipientEmail: email,
                    items: selected
                }),
                success: function (response) {
                    alert("Email sent successfully!");
                },
                error: function (xhr) {
                    alert("Failed to send email: " + xhr.responseText);
                }
            });
        });

    </script>
}